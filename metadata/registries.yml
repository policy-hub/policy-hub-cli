- path: https://github.com/open-policy-agent/contrib/api_authz/docker/policy
  description: |
"HTTP API Authorization with OPA
This directory helps provide fine-grained, policy-based control over who can run which RESTful APIs."
  maintainers:
    - https://github.com/tsandall
  version: master
  homepage: http://www.openpolicyagent.org/docs/http-api-authorization
  name: contrib.api_authz
  labels:
    - api
    - authz

- path: https://github.com/open-policy-agent/contrib/cloud-foundry/policies
  description: |
"This directory provides configuration policies and validators for you Cloud Foundry Deployments.
With the use of OPA, bundles of policies to be used with conftest for fitness function testing your platform.

OPA provides the policy rules as well as policy language rego. Conftest provides developers with local tooling to do static analysis of configuration files so that engineers can shift left on testing infrastructure as code.

Why you should care? Being able to test baseline values before attempting to deploy allows operators to fail fast. These policies along with these tools are used to help bridge that gap."
  maintainers:
    - https://github.com/tsandall
  version: master
  homepage: https://github.com/open-policy-agent/contrib
  name: contrib.cloud-foundry
  labels:
    - cloud-foundry

- path: https://github.com/open-policy-agent/contrib/dart_authz/policies
  description: |
"This repository shows how to integrate a service written in Dart with OPA to perform API authorization. It is a direct port of the OPA-Python example, with a few enhancements."
  maintainers:
    - https://github.com/tsandall
  version: master
  homepage: https://github.com/open-policy-agent/contrib
  name: contrib.dart_authz
  labels:
    - dart
    - authz

- path: https://github.com/open-policy-agent/contrib/image_enforcer/policies
  description: |
"This directory shows how you can use OPA to enforce admission policies on container images in Kubernetes.

You can use this project to enforce simple admission policies on images such as:

    Naming conventions
    Version pinning (e.g., no latest)
    Registry usage (e.g., production must use internal registry)

Using the openpolicyagent/clair-layer-sync image, you can also enforce more sophisticated policies based on image vulnerability scanning.

This directory contains the following:

    Kubernetes manifests for deploying the image enforcer.
    Steps to use the image enforcer.
    Source for the openpolicyagent/clair-layer-sync Docker image.
"
  maintainers:
    - https://github.com/tsandall
  version: master
  homepage: https://github.com/open-policy-agent/contrib
  name: contrib.image_enforcer
  labels:
    - image

- path: https://github.com/open-policy-agent/contrib/k8s_node_selector
  description: |
"Cloud providers support the concept of agentpools or nodepools in a Kubernetes (Azure AKS, GCP and AWS). Each pool is a group of VMs with a specific spec/type. This allows a cluster to support, for example, both high memory VMs and GPU VMs. Workloads can then be scheduled onto these different VM types using nodeSelectors.

A nodeSelector provides controls around which nodes each pod gets scheduled on. Typically developers don't include nodeSelectors which means that an admin needs to write a mutating admission controller to tell k8s to automatically add them and assign the workload to the correct type of machine in the cluster.

In this example, we show how to use an OPA Policy to assign nodeSelectors to ensure that pods from different k8s namespaces run on different agentpools.

The policy looks at the namespace in which the pod is to be scheduled and checks for an agentpool label. If the namespace has a label set then a nodeselector is set to assign the pod to the agentpool."
  maintainers:
    - https://github.com/tsandall
  version: master
  homepage: https://github.com/open-policy-agent/contrib
  name: contrib.k8s_node_selector
  labels:
    - kubernetes
    - k8s
    - node_selector

- path: https://github.com/open-policy-agent/contrib/puppet_example
  description: |
"Puppet Authorization Example

This example shows how OPA can authorize changes to Puppet manifests.
"
  maintainers:
    - https://github.com/tsandall
  version: master
  homepage: https://github.com/open-policy-agent/contrib
  name: contrib.puppet_example
  labels:
    - puppet

- path: https://github.com/crdant/cf-manifest-policy/policy
  description: |
"A set of OPA policies to validate Cloud Foundry or Tanzu Application Service deployment manifests using Conftest.

Policies help you avoid obvious errors, e.g. no applications defined, and enforce best practices like running more than one instance. They can be used to validate your manifests during development or as part of your CI/CD pipeline."
  maintainers:
    - https://github.com/crdant
  version: v0.0.4
  homepage: https://github.com/crdant/cf-manifest-policy
  name: cf-manifest-policy
  labels:
    - cloud-foundry
    - tanzu
    - TAS


